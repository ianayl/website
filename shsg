#!/bin/sh

# shsg - shell site generator
#
# A simple static site generator written in pure POSIX sh
# 
# HUGE DISCLAIMER: shsg is WIP, so it won't support markdown completely yet
# 
# - The themes are located in ./themes
# - The pages for the website are located in ./pages
# - The finished website is located at ./public

usage() {
    >&2 echo "\nUsage: ./shsg [OPTION] [THEME] ...
\t-b\tbuild the site into ./public using [THEME]
\t-c\tclean up current site
\t-h\tprint this help message
"
}

# clean up after myself
clean() {
    echo "==> Cleaning up..."
    [ -d './public' ] && rm -vr ./public
}

# TODO if a component, eg template_header isnt found in the type
# folder of the theme, refer to generic for the component
# this just returns where the file to use is, and if there is no files 
# it returns nothing 
# use this helper function
whichcomp() {
    echo ok
}

# Process text first
handle_raw_text() {

# set IFS as \n
oldIFS=$IFS
IFS='
'
    processed="$1"

    # Check for images
    img_file="$f_type_loc/img"
    if [ -f "$img_file" ]
    then
        # cycle through every image found
        for img in $(echo "$processed" | grep -oP "\!\[.*?\]\(.*?\)")
        do
            [ -z "$img" ] && continue

            # Isolate for first param
            param_1="$(echo $img | grep -oP "(?<=\[)(.*?)(?=\\])")"
            # Escape characters in param_1
            e_param_1=$(echo "$param_1" | sed -e 's/[\/&]/\\&/g')

            # Isolate for 2nd param
            param_2="$(echo $img | grep -oP "(?<=\()(.*?)(?=\\))")"
            # Escape characters in param_2
            e_param_2=$(echo "$param_2" | sed -e 's/[\/&]/\\&/g')

            # Generate resulting value
            res="$(cat "$img_file" | \
               sed "s/###PARAM1###/$e_param_1/g; s/###PARAM2###/$e_param_2/g")"
            e_res="$(echo "$res" | sed -e 's/[\/&]/\\&/g')"
            processed=$(echo "$processed" | \
                        sed -r "s/\!\[[^]]*\]\([^)]*\)/$e_res/")
        done
    fi

    # Checks for a (links)
    a_file="$f_type_loc/a"
    if [ -f "$a_file" ]
    then
        # Cycle through every a found
        for a in $(echo "$processed" | grep -oP "\[.*?\]\(.*?\)")
        do
            [ -z "$a" ] && continue

            # Isolate for first param
            param_1="$(echo $a | grep -oP "(?<=\[)(.*?)(?=\\])")"
            # Escape characters in param_1
            e_param_1=$(echo "$param_1" | sed -e 's/[\/&]/\\&/g')

            # Isolate for 2nd param
            param_2="$(echo $a | grep -oP "(?<=\()(.*?)(?=\\))")"
            # Escape characters in param_2
            e_param_2=$(echo "$param_2" | sed -e 's/[\/&]/\\&/g')

            # Generate resulting value
            res="$(cat "$a_file" | \
               sed "s/###PARAM1###/$e_param_1/g; s/###PARAM2###/$e_param_2/g")"
            e_res="$(echo "$res" | sed -e 's/[\/&]/\\&/g')"
            processed=$(echo "$processed" | \
                        sed -r "s/\[[^]]*\]\([^)]*\)/$e_res/")
        done
    fi

    # Checks for b (bold)
    b_file="$f_type_loc/b"
    if [ -f "$b_file" ]
    then
        # Cycle through every b found
        for b in $(echo "$processed" | grep -oP "\*\*.*?\*\*")
        do
            [ -z "$b" ] && continue

            # get rid of starting *'s
            param_1=${b##\*\*}
            # get rid of ending *'s
            param_1=${param_1%%\*\*}
            e_param_1=$(echo "$param_1" | sed -e 's/[\/&]/\\&/g')

            # Generate resulting value
            res="$(cat "$b_file" | sed "s/###PARAM1###/$e_param_1/g")"
            e_res="$(echo "$res" | sed -e 's/[\/&]/\\&/g')"
            # TODO this is broken, this breaks nesting
            processed=$(echo "$processed" | \
                        sed "s/\\*\\*\\([^\\*]*\\)\\*\\*/$e_res/")
        done
    fi

    # Checks for i (italics)
    i_file="$f_type_loc/i"
    if [ -f "$i_file" ]
    then
        # Cycle through every i found
        for i in $(echo "$processed" | grep -oP "\*.*?\*")
        do
            echo "i: $i"
            [ -z "$i" ] && continue

            # get rid of starting *
            param_1=${i##\*}
            echo "  param 1: $param_1"
            # get rid of ending *
            param_1=${param_1%%\*}
            echo "  param 1: $param_1"
            e_param_1=$(echo "$param_1" | sed -e 's/[\/&]/\\&/g')
            echo "  e_param_1: $e_param_1"

            # Generate resulting value
            res="$(cat "$i_file" | sed "s/###PARAM1###/$e_param_1/g")"
            e_res="$(echo "$res" | sed -e 's/[\/&]/\\&/g')"
            processed=$(echo "$processed" | \
                        sed "s/\\*\\([^\\*]*\\)\\*/$e_res/")
        done
    fi

# get back oldIFS
IFS=$oldIFS
}

# Handle p elements
handle_p() {
    handle_raw_text "$l"

    # Checks to confirm that this is actually a p:

    # Check 1: the input was only an image and nothing else
    not_p_check=$(echo "$l" | grep -oP "\!\[.*?\]\(.*?\)")
    [ "$l" = "$not_p_check" ] && \
        echo "$processed" >> $f_final_dest && return 0

    p_file="$f_type_loc/p"
    if [ -f "$p_file" ]
    then
        # Making sure $processed has the proper escapes to go into sed
        e_processed=$(echo "$processed" | sed -e 's/[\/&]/\\&/g')
        # Add p tag to final file
        cat "$p_file" | sed -e "s/###PARAM1###/$e_processed/" >> $f_final_dest
    else
        echo "==> Warning: no template file for p found, skipping."
    fi

    # TODO Check 2: the input was not straight up html
}

# handle h* elements
handle_h() {
    # TODO insert into handle_raw_text
    h_file="$f_type_loc/h${#l_test}"
    if [ -f "$h_file" ] 
    then
        # get rid of starting #'s
        res=${l#${l_test}}
        # get rid of space after #'s, if it exists
        res=${res#' '}
        e_res=$(echo "$res" | sed -e 's/[\/&]/\\&/g')
        cat "$h_file" | sed -e "s/###PARAM1###/$e_res/g" >> $f_final_dest
    else
        echo "==> Warning: no template file for h${#l_test} found, skipping."
    fi
}

handle_special() {
    echo special
}

# temporarily what build is for now
build() {
    [ -z $1 ] && usage && exit

    if [ -d "themes/$1" ]
    then 
        clean
        echo "--- Using theme $1"

        echo "==> Building site into ./public..."
        mkdir -v public
        # Copy styles over
        cp -rv "themes/$1/styles" "public/styles"

        # Process per markdown file, but also don't process dotfiles
        for f in $(find pages | grep -e '\.md$' | grep -v '\/\.')
        do
            # Don't process directories ending in .md
            [ -d $f ] && continue

            echo "--- Processing $f..."

            # Caching first line for later use
            f_1l=$(head -n 1 $f)

            # If type line does not exist
            if [ -z "$(echo "$f_1l" | grep '<!--.*-->')" ] 
            then
                f_type='generic'
                f_1l=''
            else
                f_type=$(echo "$f_1l" | sed -e 's/<!--//; s/-->//; s/\s//g')
                # if type is not defined, default to generic
                [ -z "$f_type" ] && f_type='generic'
            fi

            f_type_loc="themes/$1/filetype/$f_type"
            if [ -d "$f_type_loc" ]
            then
                echo "--- $f has type $f_type."
            else
                echo "==> Error: $f has undeclared type $f_type."
                continue
            fi

            f_final_dest=$(echo $f | sed -e 's/^pages/public/; s/md$/html/')
            # Copy the header over to start the file
            mkdir -pv ${f_final_dest%/*} # removes filename
            cp -v "$f_type_loc/template_header" "$f_final_dest"

            # Processing each file
            while IFS= read -r l || [ -n "$l" ]
            do
                [ -z "$l" ] && continue
                # Discard first line in the file if it's a type line
                [ "$l" = "$f_1l" ] && continue

                # echo "$l"

                # h* of any number
                l_test="$(echo $l | grep -o '^#*')"
                [ -n "$l_test" ] && handle_h && continue
                
                # Custom elements
                l_test="$(echo $l | grep -o '^\$\w*:::..')"
                [ -n "$l_test" ] && handle_special && continue

                # No type, it's a p
                handle_p

            done < "$f"
            # TODO the different parameters in a custom element has a
            # delimiter of :::, just as how they are defined by $name:::, which 
            # starts in a :::. This way the awk command can just parse the
            # indexes

            # Placing the footer of the file to finish it up
            cat "$f_type_loc/template_footer" >> "$f_final_dest"
        done
        # cp -rv "themes/$1/index.html" "public/index.html"

        echo "==> Build finished."
    else
        echo "==> Error: theme $1 not found." && exit
    fi
}

case $1 in
    -b) build $2 ;;
    -c) clean ;;
    *) usage ;;
esac
